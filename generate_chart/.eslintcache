[{"/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/reportWebVitals.js":"1","/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/components/TextEditor/TextEditor.jsx":"2","/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/components/Chart/Chart.jsx":"3","/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/components/Header/Header.jsx":"4","/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/App.js":"5","/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/index.js":"6"},{"size":362,"mtime":1606349029117,"results":"7","hashOfConfig":"8"},{"size":193,"mtime":1606595603644,"results":"9","hashOfConfig":"8"},{"size":7649,"mtime":1607368403143,"results":"10","hashOfConfig":"8"},{"size":205,"mtime":1606351584195,"results":"11","hashOfConfig":"8"},{"size":520,"mtime":1607356505308,"results":"12","hashOfConfig":"8"},{"size":500,"mtime":1606349029117,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"173ju0m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/reportWebVitals.js",[],["30","31"],"/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/components/TextEditor/TextEditor.jsx",[],["32","33"],"/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/components/Chart/Chart.jsx",["34"],"import * as React from 'react';\nimport * as ChartJS from 'chart.js';\nimport './styles.css';\n\n/**\n * Class that creates the footer and the chart\n * First, we create a div, that contains a canvas, which contains the chart\n * and another div that contains the footer\n*/\n\n\nclass Chart extends React.Component {\n    render() {\n        return (\n            <>\n            <div>\n                <canvas id='chartSpace'></canvas>\n            </div>\n            <div className='footer'>\n                <input id='buttonChart' type='button' value='Generate chart' onClick={() => this.makeChart()} />\n            </div>\n            </>);\n    }\n\n\n    makeChart = () => {\n        /**\n         * First, we find the textarea, where our events will be typed\n         * and parsed it into JSON elements\n         */\n        let inputText = document.querySelector('#userInput').value;\n\n        if (!inputText) {\n            window.alert('Insert the events');\n            return 1;\n        }\n\n        let arrayString = inputText.split('\\n');\n        let events = []\n\n        arrayString.forEach(element => {\n            let object = JSON.parse(element);\n            events = [...events, object];\n        });\n\n\n        let dataEvents = this.verifyData(events);\n        if (dataEvents === 1 ) {\n            return false;\n        }\n        else {\n            let data = this.createChartDataset(dataEvents[0], dataEvents[1], dataEvents[2]);\n            this.createChart(data);\n            return true;\n        }\n    }\n\n    verifyData = (events) => {\n        /**\n         * Second, we verify if the necessary events (start, stop and span)\n         * were inserted\n         */\n        let dataEvents = [];\n        let hasStart = false, hasStop = false, hasSpan = false;\n        let startPosition = 0, count = 0, stopPosition = 0;\n        let timestampBegin, timestampEnd;\n        let selectData = [], groupData = [];\n\n        events.forEach(element => {\n            if (element.type === 'start') {\n                hasStart = true;\n                startPosition = count;\n                selectData = element.select;\n                groupData = element.group;\n            }\n            if (element.type === 'stop' && hasStart) {\n                hasStop = true;\n                stopPosition = count;\n            }\n            if (element.type === 'span' && hasStart) {\n                hasSpan = true;\n                timestampBegin = element.begin;\n                timestampEnd = element.end;\n            }\n            count += 1;\n        });\n\n        if (!hasStart) {\n            window.alert(\"Insert the event with type start\");\n            return 1;\n        }\n        if (!hasStop) {\n            window.alert(\"Insert the event with type stop\");\n            return 1;\n        }\n        if (!hasSpan) {\n            window.alert(\"Insert the event with type span\");\n            return 1;\n        }\n        /**\n         * Then, we selected the data from events\n         */\n\n        for (let index = startPosition; index < stopPosition; index++) {\n            if (events[index].type === 'data' && (events[index].timestamp >= timestampBegin && events[index].timestamp <= timestampEnd))\n                dataEvents = [...dataEvents, events[index]];\n        }\n\n        return [dataEvents, selectData, groupData];\n    }\n\n    createChartDataset = (dataEvents, selectData, groupData) => {\n        /**\n         * Create the dataset that is used to create the chart\n         */\n\n        let data = [];\n\n        /**\n         * Function which converts the first char of the string to upper case\n         */\n        const capitalize = str => {\n            if (typeof str != 'string') {\n                return '';\n            }\n            return str.charAt(0).toUpperCase() + str.substr(1) + \" \";\n        }\n\n        /*\n         * Function that creates a random color  \n         */\n\n        const getRandomColor = () => {\n            let colorArray = []\n            for (let index = 0; index < 3; index++) {\n                let randomNumber = Math.floor(Math.random() * 255);\n                colorArray = [...colorArray, randomNumber];\n            }\n            let str = `rgb(${colorArray[0]}, ${colorArray[1]}, ${colorArray[2]})`;\n            return str;\n        }\n\n        /**\n         * Here we create a loop for all data events putting it into an object and adding\n         * the necessary information to plot the graph\n         */\n        dataEvents.forEach(element => {\n            let dataObject = {};\n            let auxListSelect = [];\n            let auxLabelList = [];\n\n            let strGroup = \"\";\n            groupData.forEach(group => {\n                strGroup += capitalize(element[group]);\n            });\n\n            selectData.forEach(select => {\n                let strSelect = \"\";\n                strSelect += capitalize(select.replaceAll(\"_\", \" \"));\n                auxListSelect = [...auxListSelect, element[select]];\n                auxLabelList = [...auxLabelList, strGroup + strSelect];\n            });\n\n            dataObject.label = auxLabelList;\n            dataObject.data = auxListSelect;\n            dataObject.backgroundColor = \"rgb(255, 255, 255)\";\n            dataObject.borderColor = getRandomColor();\n            data = [...data, dataObject];\n        });\n\n        return data;\n    }\n\n    createChart = (data) => {\n    /**\n     * Function that creates the graph\n     */\n        let chartSpace = document.querySelector('#chartSpace');\n        let chart = new ChartJS(chartSpace, {\n                type: 'line',\n                data: {\n                    datasets: data\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n        });\n    }\n}\n\nexport default Chart;\n\n// { \"type\": \"start\", \"timestamp\": \"1519780251293\", \"select\": [\"min_response_time\", \"max_response_time\"], \"group\": [\"os\", \"browser\"] }\n// { \"type\": \"span\", \"timestamp\": \"1519780251293\", \"begin\": \"1519780251293\", \"end\": \"1519780260201\" }\n// { \"type\": \"data\", \"timestamp\": \"1519780251000\", \"os\": \"linux\", \"browser\": \"chrome\", \"min_response_time\": \"0.1\", \"max_response_time\": \"1.3\" }\n// { \"type\": \"stop\", \"timestamp\": \"1519780251293\" }\n\n/*\n    { \"type\": \"start\", \"timestamp\": \"1519780251293\", \"select\": [\"min_response_time\", \"max_response_time\"], \"group\": [\"os\", \"browser\"] }\n    { \"type\": \"span\", \"timestamp\": \"1519780251293\", \"begin\": \"1519780251293\", \"end\": \"1519780260201\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"linux\", \"browser\": \"chrome\", \"min_response_time\": \"0.1\", \"max_response_time\": \"1.3\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"mac\", \"browser\": \"chrome\", \"min_response_time\": \"0.2\", \"max_response_time\": \"1.2\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"mac\", \"browser\": \"firefox\", \"min_response_time\": \"0.3\", \"max_response_time\": \"1.2\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"linux\", \"browser\": \"firefox\", \"min_response_time\": \"0.1\", \"max_response_time\": \"1.0\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"windows\", \"browser\": \"chrome\", \"min_response_time\": \"0.2\", \"max_response_time\": \"0.9\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"mac\", \"browser\": \"chrome\", \"min_response_time\": \"0.1\", \"max_response_time\": \"1.0\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"mac\", \"browser\": \"firefox\", \"min_response_time\": \"0.2\", \"max_response_time\": \"1.1\" }\n    { \"type\": \"data\", \"timestamp\": \"1519780251293\", \"os\": \"windows\", \"browser\": \"firefox\", \"min_response_time\": \"0.3\", \"max_response_time\": \"1.4\" }\n    { \"type\": \"stop\", \"timestamp\": \"1519780251293\" }\n*/","/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/components/Header/Header.jsx",[],"/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/App.js",[],"/home/ubuntu/Desafios/Trabalho JS/generate_chart/src/index.js",[],["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"37","replacedBy":"41"},{"ruleId":"39","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":179,"column":13,"nodeType":"45","messageId":"46","endLine":179,"endColumn":18},{"ruleId":"37","replacedBy":"47"},{"ruleId":"39","replacedBy":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],["49"],["50"],"no-unused-vars","'chart' is assigned a value but never used.","Identifier","unusedVar",["49"],["50"],"no-global-assign","no-unsafe-negation"]